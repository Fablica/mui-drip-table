{"version":3,"file":"index.js","sources":["../src/DripPopover/DripPopoverContent.js","../src/DripPopover/DripPopoverTarget.js","../src/DripPopover/DripPopover.js","../src/DripTableFilter.js","../src/DripTableViewCol.js","../src/DripTableSearch.js","../src/DataStyles.js","../src/DripTableToolbar.js","../src/DripTableToolbarSelect.js","../src/DripTableFilterList.js","../src/DripTableBodyCell.js","../src/DripTableBodyRow.js","../src/DripTableSelectCell.js","../src/DripTableBody.js","../src/DripTableHeadRow.js","../src/DripTableHeadCell.js","../src/DripTableHead.js","../src/DripTablePagination.js","../src/textLabels.js","../src/DripTable.js"],"sourcesContent":["import React from \"react\";\r\n\r\nclass DripPopoverContent extends React.Component {\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default DripPopoverContent;\r\n","import React from \"react\";\r\n\r\nclass DripPopoverTarget extends React.Component {\r\n  render() {\r\n    const targetContent = React.Children.map(this.props.children, (child, index) => {\r\n      return React.cloneElement(child, {\r\n        key: index,\r\n        ref: this.props.targetRef,\r\n        onClick: this.props.onClick,\r\n      });\r\n    });\r\n\r\n    return targetContent;\r\n  }\r\n}\r\n\r\nexport default DripPopoverTarget;\r\n","import React from \"react\";\r\nimport { findDOMNode } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Popover from \"@material-ui/core/Popover\";\r\n\r\n/** custom */\r\nimport DripPopoverContent from \"./DripPopoverContent\";\r\nimport DripPopoverTarget from \"./DripPopoverTarget\";\r\n\r\nclass DripPopover extends React.Component {\r\n  static propTypes = {\r\n    arrow: PropTypes.bool,\r\n    refClose: PropTypes.func,\r\n    refExit: PropTypes.func,\r\n    children: (props, propName, componentName) => {\r\n      let childMatch = true;\r\n      const expectedComponents = [DripPopoverContent, DripPopoverTarget];\r\n\r\n      React.Children.map(props.children, (child, index) => {\r\n        if (expectedComponents.indexOf(child.type) === -1) childMatch = false;\r\n      });\r\n\r\n      if (!childMatch) {\r\n        return new Error(\r\n          \"`\" +\r\n            componentName +\r\n            \"` \" +\r\n            \"should only have children of the following types: `DripPopoverTarget`, `DripPopoverContent`.\",\r\n        );\r\n      }\r\n    },\r\n  };\r\n\r\n  state = {\r\n    open: false,\r\n  };\r\n\r\n  componentWillMount() {\r\n    this.anchorEl = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.refClose) {\r\n      this.props.refClose(this.handleRequestClose);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.open === true) {\r\n      this.anchorEl = findDOMNode(this.anchorEl);\r\n      this.popoverActions.updatePosition();\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.anchorEl = findDOMNode(this.anchorEl);\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  handleRequestClose = cb => {\r\n    this.setState({ open: false }, cb && typeof cb === \"function\" ? cb() : () => {});\r\n  };\r\n\r\n  handleOnExit = () => {\r\n    if (this.props.refExit) {\r\n      this.props.refExit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let popoverRender = [];\r\n\r\n    const { className, placement, refClose, refExit, children, ...providedProps } = this.props;\r\n\r\n    React.Children.map(children, (child, index) => {\r\n      if (child.type === DripPopoverContent || child.type === <DripPopoverContent />.type) {\r\n        const transformOriginSpecs = {\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        };\r\n\r\n        const anchorOriginSpecs = {\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        };\r\n\r\n        const popoverContent = (\r\n          <Popover\r\n            action={actions => (this.popoverActions = actions)}\r\n            key={index}\r\n            elevation={2}\r\n            open={this.state.open}\r\n            onClose={this.handleRequestClose}\r\n            onExited={this.handleOnExit}\r\n            anchorEl={this.anchorEl}\r\n            ref={el => this.popoverEl}\r\n            anchorOrigin={anchorOriginSpecs}\r\n            transformOrigin={transformOriginSpecs}\r\n            {...providedProps}>\r\n            {child}\r\n          </Popover>\r\n        );\r\n\r\n        popoverRender.push(popoverContent);\r\n      } else if (child.type === DripPopoverTarget || child.type === <DripPopoverTarget />.type) {\r\n        const targetContent = React.cloneElement(child, {\r\n          key: index,\r\n          targetRef: el => (this.anchorEl = el),\r\n          onClick: this.handleClick,\r\n        });\r\n\r\n        popoverRender.push(targetContent);\r\n      }\r\n    });\r\n\r\n    return popoverRender;\r\n  }\r\n}\r\n\r\nexport default DripPopover;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nexport const defaultFilterStyles = {\r\n  root: {\r\n    padding: \"16px 24px 16px 24px\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  header: {\r\n    flex: \"0 0 auto\",\r\n    marginBottom: \"16px\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  title: {\r\n    display: \"inline-block\",\r\n    marginLeft: \"7px\",\r\n    color: \"#424242\",\r\n    fontSize: \"14px\",\r\n    fontWeight: 500,\r\n  },\r\n  noMargin: {\r\n    marginLeft: \"0px\",\r\n  },\r\n  reset: {\r\n    alignSelf: \"left\",\r\n  },\r\n  resetLink: {\r\n    color: \"#027cb5\",\r\n    display: \"inline-block\",\r\n    marginLeft: \"24px\",\r\n    fontSize: \"12px\",\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    \"&:hover\": {\r\n      color: \"#FF0000\",\r\n    },\r\n  },\r\n  filtersSelected: {\r\n    alignSelf: \"right\",\r\n  },\r\n  /* checkbox */\r\n  checkboxList: {\r\n    flex: \"1 1 100%\",\r\n    display: \"inline-flex\",\r\n    marginRight: \"24px\",\r\n  },\r\n  checkboxListTitle: {\r\n    marginLeft: \"7px\",\r\n    marginBottom: \"8px\",\r\n    fontSize: \"14px\",\r\n    color: \"#424242\",\r\n    textAlign: \"left\",\r\n    fontWeight: 500,\r\n  },\r\n  checkboxFormGroup: {\r\n    marginTop: \"8px\",\r\n  },\r\n  checkboxFormControl: {\r\n    margin: \"0px\",\r\n  },\r\n  checkboxFormControlLabel: {\r\n    fontSize: \"15px\",\r\n    marginLeft: \"8px\",\r\n    color: \"#4a4a4a\",\r\n  },\r\n  checkboxIcon: {\r\n    //color: \"#027cb5\",\r\n    width: \"32px\",\r\n    height: \"32px\",\r\n  },\r\n  checkbox: {\r\n    \"&$checked\": {\r\n      color: \"#027cB5\",\r\n    },\r\n  },\r\n  checked: {},\r\n  /* selects */\r\n  selectRoot: {\r\n    display: \"flex\",\r\n    marginTop: \"16px\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    width: \"100%\",\r\n    height: \"80%\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  selectFormControl: {\r\n    flex: \"1 1 calc(50% - 24px)\",\r\n    marginRight: \"24px\",\r\n    marginBottom: \"24px\",\r\n  },\r\n};\r\n\r\nclass DripTableFilter extends React.Component {\r\n  static propTypes = {\r\n    filterData: PropTypes.array.isRequired,\r\n    filterList: PropTypes.array.isRequired,\r\n    options: PropTypes.object.isRequired,\r\n    onFilterUpdate: PropTypes.func,\r\n    onFilterRest: PropTypes.func,\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  handleCheckboxChange = (index, column) => {\r\n    this.props.onFilterUpdate(index, column, \"checkbox\");\r\n  };\r\n\r\n  handleDropdownChange = (event, index) => {\r\n    const value = event.target.value === \"All\" ? \"\" : event.target.value;\r\n    this.props.onFilterUpdate(index, value, \"dropdown\");\r\n  };\r\n\r\n  handleMultiselectChange = (index, column) => {\r\n    this.props.onFilterUpdate(index, column, \"multiselect\");\r\n  };\r\n\r\n  renderCheckbox(columns) {\r\n    const { classes, filterData, filterList } = this.props;\r\n\r\n    return columns.map(\r\n      (column, index) =>\r\n        column.filter ? (\r\n          <div className={classes.checkboxList} key={index}>\r\n            <FormGroup>\r\n              <Typography variant=\"caption\" className={classes.checkboxListTitle}>\r\n                {column.name}\r\n              </Typography>\r\n              {filterData[index].map((filterColumn, filterIndex) => (\r\n                <FormControlLabel\r\n                  key={filterIndex}\r\n                  classes={{\r\n                    root: classes.checkboxFormControl,\r\n                    label: classes.checkboxFormControlLabel,\r\n                  }}\r\n                  control={\r\n                    <Checkbox\r\n                      className={classes.checkboxIcon}\r\n                      onChange={this.handleCheckboxChange.bind(null, index, filterColumn)}\r\n                      checked={filterList[index].indexOf(filterColumn) >= 0 ? true : false}\r\n                      classes={{\r\n                        root: classes.checkbox,\r\n                        checked: classes.checked,\r\n                      }}\r\n                      value={filterColumn.toString()}\r\n                    />\r\n                  }\r\n                  label={filterColumn}\r\n                />\r\n              ))}\r\n            </FormGroup>\r\n          </div>\r\n        ) : (\r\n          false\r\n        ),\r\n    );\r\n  }\r\n\r\n  renderSelect(columns) {\r\n    const { classes, filterData, filterList, options } = this.props;\r\n    const textLabels = options.textLabels.filter;\r\n\r\n    return (\r\n      <div className={classes.selectRoot}>\r\n        {columns.map(\r\n          (column, index) =>\r\n            column.filter ? (\r\n              <FormControl className={classes.selectFormControl} key={index}>\r\n                <InputLabel htmlFor={column.name}>{column.name}</InputLabel>\r\n                <Select\r\n                  value={filterList[index].toString() || textLabels.all}\r\n                  name={column.name}\r\n                  onChange={event => this.handleDropdownChange(event, index)}\r\n                  input={<Input name={column.name} id={column.name} />}>\r\n                  <MenuItem value={textLabels.all} key={0}>\r\n                    {textLabels.all}\r\n                  </MenuItem>\r\n                  {filterData[index].map((filterColumn, filterIndex) => (\r\n                    <MenuItem value={filterColumn} key={filterIndex + 1}>\r\n                      {filterColumn.toString()}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            ) : (\r\n              false\r\n            ),\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderMultiselect(columns) {\r\n    const { classes, filterData, filterList, options } = this.props;\r\n\r\n    return (\r\n      <div className={classes.selectRoot}>\r\n        {columns.map(\r\n          (column, index) =>\r\n            column.filter ? (\r\n              <FormControl className={classes.selectFormControl} key={index}>\r\n                <InputLabel htmlFor={column.name}>{column.name}</InputLabel>\r\n                <Select\r\n                  multiple\r\n                  value={filterList[index] || []}\r\n                  renderValue={selected => selected.join(\", \")}\r\n                  name={column.name}\r\n                  onChange={event => this.handleMultiselectChange(index, event.target.value)}\r\n                  input={<Input name={column.name} id={column.name} />}>\r\n                  {filterData[index].map((filterColumn, filterIndex) => (\r\n                    <MenuItem value={filterColumn} key={filterIndex + 1}>\r\n                      <Checkbox\r\n                        checked={filterList[index].indexOf(filterColumn) >= 0 ? true : false}\r\n                        value={filterColumn.toString()}\r\n                        className={classes.checkboxIcon}\r\n                        classes={{\r\n                          root: classes.checkbox,\r\n                          checked: classes.checked,\r\n                        }}\r\n                      />\r\n                      <ListItemText primary={filterColumn} />\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            ) : (\r\n              false\r\n            ),\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { classes, columns, options, onFilterReset } = this.props;\r\n    const textLabels = options.textLabels.filter;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <div className={classes.header}>\r\n          <div className={classes.reset}>\r\n            <Typography\r\n              variant=\"caption\"\r\n              className={classNames({\r\n                [classes.title]: true,\r\n                [classes.noMargin]: options.filterType !== \"checkbox\" ? true : false,\r\n              })}>\r\n              {textLabels.title}\r\n            </Typography>\r\n            <button className={classes.resetLink} tabIndex={0} aria-label={textLabels.reset} onClick={onFilterReset}>\r\n              {textLabels.reset}\r\n            </button>\r\n          </div>\r\n          <div className={classes.filtersSelected} />\r\n        </div>\r\n        {options.filterType === \"checkbox\"\r\n          ? this.renderCheckbox(columns)\r\n          : options.filterType === \"multiselect\"\r\n            ? this.renderMultiselect(columns)\r\n            : this.renderSelect(columns)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultFilterStyles, { name: \"DripTableFilter\" })(DripTableFilter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nexport const defaultViewColStyles = {\r\n  root: {\r\n    padding: \"16px 24px 16px 24px\",\r\n    fontFamily: \"Roboto\",\r\n  },\r\n  title: {\r\n    marginLeft: \"-7px\",\r\n    fontSize: \"14px\",\r\n    color: \"#424242\",\r\n    textAlign: \"left\",\r\n    fontWeight: 500,\r\n  },\r\n  formGroup: {\r\n    marginTop: \"8px\",\r\n  },\r\n  formControl: {},\r\n  checkbox: {\r\n    width: \"32px\",\r\n    height: \"32px\",\r\n  },\r\n  checkboxRoot: {\r\n    \"&$checked\": {\r\n      color: \"#027cb5\",\r\n    },\r\n  },\r\n  checked: {},\r\n  label: {\r\n    fontSize: \"15px\",\r\n    marginLeft: \"8px\",\r\n    color: \"#4a4a4a\",\r\n  },\r\n};\r\n\r\nclass DripTableViewCol extends React.Component {\r\n  static propTypes = {\r\n    columns: PropTypes.array.isRequired,\r\n    options: PropTypes.object.isRequired,\r\n    onColumnUpdate: PropTypes.func,\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  handleColChange = index => {\r\n    this.props.onColumnUpdate(index);\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, options } = this.props;\r\n    const textLabels = options.textLabels.viewColumns;\r\n\r\n    return (\r\n      <FormControl component={\"fieldset\"} className={classes.root} aria-label={textLabels.titleAria}>\r\n        <Typography variant=\"caption\" className={classes.title}>\r\n          {textLabels.title}\r\n        </Typography>\r\n        <FormGroup className={classes.formGroup}>\r\n          {columns.map((column, index) => {\r\n            return (\r\n              <FormControlLabel\r\n                key={index}\r\n                classes={{\r\n                  root: classes.formControl,\r\n                  label: classes.label,\r\n                }}\r\n                control={\r\n                  <Checkbox\r\n                    className={classes.checkbox}\r\n                    classes={{\r\n                      root: classes.checkboxRoot,\r\n                      checked: classes.checked,\r\n                    }}\r\n                    onChange={this.handleColChange.bind(null, index)}\r\n                    checked={column.display}\r\n                    value={column.name}\r\n                  />\r\n                }\r\n                label={column.name}\r\n              />\r\n            );\r\n          })}\r\n        </FormGroup>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultViewColStyles, { name: \"DripTableViewCol\" })(DripTableViewCol);\r\n","import React from \"react\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst defaultSearchStyles = {\r\n  main: {\r\n    display: \"flex\",\r\n    flex: \"1 0 auto\",\r\n  },\r\n  searchIcon: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"8px\",\r\n  },\r\n  searchText: {\r\n    flex: \"0.8 0\",\r\n  },\r\n  clearIcon: {\r\n    \"&:hover\": {\r\n      color: \"#FF0000\",\r\n    },\r\n  },\r\n};\r\n\r\nclass DripTableSearch extends React.Component {\r\n  handleTextChange = event => {\r\n    const { onSearchChange } = this.props.options;\r\n\r\n    if (onSearchChange) {\r\n      onSearchChange(event.target.value);\r\n    }\r\n\r\n    this.props.onSearch(event.target.value);\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\r\n  }\r\n\r\n  onKeyDown = event => {\r\n    if (event.keyCode === 27) {\r\n      this.props.onHide();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes, options, onHide } = this.props;\r\n\r\n    return (\r\n      <Grow appear in={true} timeout={300}>\r\n        <div className={classes.main} ref={el => (this.rootRef = el)}>\r\n          <SearchIcon className={classes.searchIcon} />\r\n          <TextField\r\n            className={classes.searchText}\r\n            autoFocus={true}\r\n            InputProps={{\r\n              \"aria-label\": options.textLabels.toolbar.search,\r\n            }}\r\n            onChange={this.handleTextChange}\r\n            fullWidth={true}\r\n            inputRef={el => (this.searchField = el)}\r\n          />\r\n          <IconButton className={classes.clearIcon} onClick={onHide}>\r\n            <ClearIcon />\r\n          </IconButton>\r\n        </div>\r\n      </Grow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultSearchStyles, { name: \"DripTableSearch\" })(DripTableSearch);\r\n","import React from \"react\";\r\nimport merge from \"lodash.merge\";\r\nimport get from \"lodash.get\";\r\n\r\n/** material-ui */\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst getStyle = (obj, name) => {\r\n  return get(obj, \"styles.\" + name, null);\r\n};\r\n\r\nconst stylePass = (displayName, setFn) => {\r\n  const result = class StylePass extends React.Component {\r\n    componentWillMount() {\r\n      setFn(this.props.classes);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n      if (this.props.classes !== nextProps.classes) setFn(nextProps.classes);\r\n    }\r\n\r\n    render() {\r\n      return this.props.children;\r\n    }\r\n  };\r\n  result.displayName = displayName;\r\n  return result;\r\n};\r\n\r\nclass DataStyles extends React.Component {\r\n  state = {\r\n    data: null,\r\n  };\r\n\r\n  setStyleClass = data => {\r\n    this.setState(() => ({\r\n      styleData: data,\r\n    }));\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.buildComponent(props);\r\n  }\r\n\r\n  componentWillReceieveProps(nextProps) {\r\n    if (nextProps.styles !== this.props.styles) this.buildComponent(nextProps);\r\n  }\r\n\r\n  buildComponent(props) {\r\n    const defaultStyles = props.defaultStyles ? props.defaultStyles : {};\r\n    const finalStyles = merge(defaultStyles, props.styles);\r\n\r\n    this.component = withStyles(finalStyles)(stylePass(props.name, this.setStyleClass));\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const WrappedComponent = this.component;\r\n\r\n    return <WrappedComponent>{this.state.styleData ? children(this.state.styleData) : false}</WrappedComponent>;\r\n  }\r\n}\r\n\r\nexport { DataStyles, getStyle };\r\n","import React from \"react\";\r\nimport ReactToPrint from \"react-to-print\";\r\n\r\n/** material-ui */\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport DownloadIcon from \"@material-ui/icons/FileDownload\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ViewColumnIcon from \"@material-ui/icons/ViewColumn\";\r\nimport FilterIcon from \"@material-ui/icons/FilterList\";\r\nimport merge from \"lodash.merge\";\r\n\r\n/** custom */\r\nimport { DripPopover, DripPopoverTarget, DripPopoverContent } from \"./DripPopover\";\r\nimport DripTableFilter from \"./DripTableFilter\";\r\nimport DripTableViewCol from \"./DripTableViewCol\";\r\nimport DripTableSearch from \"./DripTableSearch\";\r\nimport { getStyle, DataStyles } from \"./DataStyles\";\r\n\r\n/** デフォルトスタイル */\r\nexport const defaultToolbarStyles = {\r\n  root: {},\r\n  left: {\r\n    flex: \"1 1 55%\",\r\n  },\r\n  actions: {\r\n    flex: \"0 0 45%\",\r\n    textAlign: \"right\",\r\n  },\r\n  titleRoot: {},\r\n  titleText: {},\r\n  icon: {\r\n    \"&:hover\": {\r\n      color: \"#307BB0\",\r\n    },\r\n  },\r\n  iconActive: {\r\n    color: \"#307BB0\",\r\n  },\r\n  searchIcon: {\r\n    display: \"inline-flex\",\r\n    marginTop: \"10px\",\r\n    marginRight: \"8px\",\r\n  },\r\n};\r\n\r\n/** レスポンシブスタイル */\r\nexport const responsiveToolbarStyles = {\r\n  \"@media screen and (max-width: 960px)\": {\r\n    titleRoot: {},\r\n    titleText: {\r\n      fontSize: \"16px\",\r\n    },\r\n    spacer: {\r\n      display: \"none\",\r\n    },\r\n    left: {\r\n      // flex: \"1 1 40%\",\r\n      padding: \"8px 0px\",\r\n    },\r\n    actions: {\r\n      // flex: \"1 1 60%\",\r\n      textAlign: \"right\",\r\n    },\r\n  },\r\n  \"@media screen and (max-width: 600px)\": {\r\n    root: {\r\n      display: \"block\",\r\n    },\r\n    left: {\r\n      padding: \"8px 0px 0px 0px\",\r\n    },\r\n    titleText: {\r\n      textAlign: \"center\",\r\n    },\r\n    actions: {\r\n      textAlign: \"center\",\r\n    },\r\n  },\r\n  \"@media screen and (max-width: 480px)\": {},\r\n};\r\n\r\nclass DripTableToolbar extends React.Component {\r\n  state = {\r\n    iconActive: null,\r\n    showSearch: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.options.responsive) {\r\n      this.tbarStyles = merge(defaultToolbarStyles, responsiveToolbarStyles);\r\n    } else {\r\n      this.tbarStyles = defaultToolbarStyles;\r\n    }\r\n  }\r\n  // TODO\r\n  // CSVに出力するデータはviewColumnsがtrueのものだけにする\r\n  handleCSVDownload = () => {\r\n    const { data, columns } = this.props;\r\n    const CSVHead = columns.reduce((soFar, column) => soFar + '\"' + column.name + '\",', \"\").slice(0, -1) + \"\\r\\n\";\r\n    const CSVBody = data.reduce((soFar, row) => soFar + '\"' + row.join('\",\"') + '\"\\r\\n', []).trim();\r\n\r\n    let CSVLink = document.createElement(\"a\");\r\n    CSVLink.href = \"data:text/csv;charset=utf-8;base64,\" + window.btoa(unescape(encodeURIComponent(CSVHead + CSVBody)));\r\n    CSVLink.target = \"_blank\";\r\n    CSVLink.download = \"Download.csv\";\r\n\r\n    document.body.appendChild(CSVLink);\r\n    CSVLink.click();\r\n\r\n    CSVLink.parentNode.removeChild(CSVLink);\r\n  };\r\n\r\n  setActiveIcon = iconName => {\r\n    this.setState(() => ({\r\n      iconActive: iconName,\r\n      showSearch: iconName === \"search\" ? true : false,\r\n    }));\r\n  };\r\n\r\n  getActiveIcon = (styles, iconName) => {\r\n    return this.state.iconActive !== iconName ? styles.icon : styles.iconActive;\r\n  };\r\n\r\n  hideSearch = () => {\r\n    this.props.searchTextUpdate(null);\r\n\r\n    this.setState(() => ({\r\n      iconActive: null,\r\n      showSearch: false,\r\n    }));\r\n\r\n    this.searchButton.focus();\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      data,\r\n      options,\r\n      columns,\r\n      filterData,\r\n      filterList,\r\n      filterUpdate,\r\n      resetFilters,\r\n      searchTextUpdate,\r\n      toggleViewColumn,\r\n      title,\r\n      tableRef,\r\n    } = this.props;\r\n\r\n    const { search, downloadCsv, print, viewColumns, filterTable } = options.textLabels.toolbar;\r\n    const { showSearch } = this.state;\r\n\r\n    return (\r\n      <DataStyles defaultStyles={this.tbarStyles} name=\"DripTableToolbar\" styles={getStyle(options, \"table.toolbar\")}>\r\n        {toolbarStyles => (\r\n          <Toolbar className={toolbarStyles.root} role={\"toolbar\"} aria-label={\"Table Toolbar\"}>\r\n            <div className={toolbarStyles.left}>\r\n              {showSearch === true ? (\r\n                <DripTableSearch onSearch={searchTextUpdate} onHide={this.hideSearch} options={options} />\r\n              ) : (\r\n                <div className={toolbarStyles.titleRoot} aria-hidden={\"true\"}>\r\n                  <Typography variant=\"title\" className={toolbarStyles.titleText}>\r\n                    {title}\r\n                  </Typography>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className={toolbarStyles.actions}>\r\n              {options.search ? (\r\n                <Tooltip title={search}>\r\n                  <IconButton\r\n                    aria-label={search}\r\n                    buttonRef={el => (this.searchButton = el)}\r\n                    classes={{ root: this.getActiveIcon(toolbarStyles, \"search\") }}\r\n                    onClick={this.setActiveIcon.bind(null, \"search\")}>\r\n                    <SearchIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ) : (\r\n                false\r\n              )}\r\n              {options.download ? (\r\n                <Tooltip title={downloadCsv}>\r\n                  <IconButton\r\n                    aria-label={downloadCsv}\r\n                    classes={{ root: toolbarStyles.icon }}\r\n                    onClick={this.handleCSVDownload}>\r\n                    <DownloadIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              ) : (\r\n                false\r\n              )}\r\n              {options.print ? (\r\n                <Tooltip title={print}>\r\n                  <span>\r\n                    <ReactToPrint\r\n                      trigger={() => (\r\n                        <IconButton aria-label={print} classes={{ root: toolbarStyles.icon }}>\r\n                          <PrintIcon />\r\n                        </IconButton>\r\n                      )}\r\n                      content={() => this.props.tableRef()}\r\n                    />\r\n                  </span>\r\n                </Tooltip>\r\n              ) : (\r\n                false\r\n              )}\r\n              {options.viewColumns ? (\r\n                <DripPopover refExit={this.setActiveIcon.bind(null)} container={tableRef}>\r\n                  <DripPopoverTarget>\r\n                    <IconButton\r\n                      aria-label={viewColumns}\r\n                      classes={{ root: this.getActiveIcon(toolbarStyles, \"viewcolumns\") }}\r\n                      onClick={this.setActiveIcon.bind(null, \"viewcolumns\")}>\r\n                      <Tooltip title={viewColumns}>\r\n                        <ViewColumnIcon />\r\n                      </Tooltip>\r\n                    </IconButton>\r\n                  </DripPopoverTarget>\r\n                  <DripPopoverContent>\r\n                    <DripTableViewCol\r\n                      data={data}\r\n                      columns={columns}\r\n                      options={options}\r\n                      onColumnUpdate={toggleViewColumn}\r\n                    />\r\n                  </DripPopoverContent>\r\n                </DripPopover>\r\n              ) : (\r\n                false\r\n              )}\r\n              {options.filter ? (\r\n                <DripPopover refExit={this.setActiveIcon.bind(null)} container={tableRef}>\r\n                  <DripPopoverTarget>\r\n                    <IconButton\r\n                      aria-label={filterTable}\r\n                      classes={{ root: this.getActiveIcon(toolbarStyles, \"filter\") }}\r\n                      onClick={this.setActiveIcon.bind(null, \"filter\")}>\r\n                      <Tooltip title={filterTable}>\r\n                        <FilterIcon />\r\n                      </Tooltip>\r\n                    </IconButton>\r\n                  </DripPopoverTarget>\r\n                  <DripPopoverContent>\r\n                    <DripTableFilter\r\n                      columns={columns}\r\n                      options={options}\r\n                      filterList={filterList}\r\n                      filterData={filterData}\r\n                      onFilterUpdate={filterUpdate}\r\n                      onFilterReset={resetFilters}\r\n                    />\r\n                  </DripPopoverContent>\r\n                </DripPopover>\r\n              ) : (\r\n                false\r\n              )}\r\n            </div>\r\n          </Toolbar>\r\n        )}\r\n      </DataStyles>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DripTableToolbar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultToolbarSelectStyles = {\r\n  root: {\r\n    backgroundColor: \"#f7f7f7\",\r\n    flex: \"1 1 100%\",\r\n    display: \"flex\",\r\n    height: \"64px\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  title: {\r\n    paddingLeft: \"26px\",\r\n    top: \"50%\",\r\n    position: \"relative\",\r\n    transform: \"translateY(-50%)\",\r\n  },\r\n  iconButton: {\r\n    marginRight: \"24px\",\r\n    top: \"50%\",\r\n    display: \"block\",\r\n    position: \"relative\",\r\n    transform: \"translateY(-50%)\",\r\n  },\r\n  deleteIcon: {\r\n    color: \"#000\",\r\n  },\r\n};\r\n\r\n/**\r\n * 行選択時、表示するツールバー\r\n * Deleteアイコンを表示\r\n */\r\nclass DripTableToolbarSelect extends React.Component {\r\n  static propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    rowSelected: PropTypes.bool,\r\n    onRowsDelete: PropTypes.func,\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes, onRowsDelete, selectedRows, options } = this.props;\r\n    const textLabels = options.textLabels.selectedRows;\r\n\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <div>\r\n          <Typography variant=\"subheading\" className={classes.title}>\r\n            {selectedRows.length} {textLabels.text}\r\n          </Typography>\r\n        </div>\r\n        <Tooltip title={textLabels.delete}>\r\n          <IconButton className={classes.iconButton} onClick={onRowsDelete} aria-label={textLabels.deleteAria}>\r\n            <DeleteIcon className={classes.deleteIcon} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultToolbarSelectStyles, { name: \"DripTableToolbarSelect\" })(DripTableToolbarSelect);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst defaultFilterListStyles = {\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"left\",\r\n    flexWrap: \"wrap\",\r\n    margin: \"0px 16px 0px 16px\",\r\n  },\r\n  chip: {\r\n    margin: \"8px 8px 0px 0px\",\r\n  },\r\n};\r\n\r\nclass DripTableFilterList extends React.Component {\r\n  static propTypes = {\r\n    filterList: PropTypes.array.isRequired,\r\n    onFilterUpdate: PropTypes.func,\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes, filterList, filterUpdate } = this.props;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        {filterList.map((item, index) =>\r\n          item.map((data, colIndex) => (\r\n            <Chip\r\n              label={data}\r\n              key={colIndex}\r\n              onDelete={filterUpdate.bind(null, index, data, \"checkbox\")}\r\n              className={classes.chip}\r\n            />\r\n          )),\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultFilterListStyles, { name: \"DripTableFilterList\" })(DripTableFilterList);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultBodyCellStyles = {\r\n  root: {},\r\n  cellHide: {\r\n    display: \"none\",\r\n  },\r\n  cellStacked: {\r\n    \"@media screen and (max-width: 960px)\": {\r\n      display: \"inline-block\",\r\n      backgroundColor: \"#FFF\",\r\n      fontSize: \"16px\",\r\n      height: \"24px\",\r\n      width: \"calc(50% - 80px)\",\r\n      whiteSpace: \"nowrap\",\r\n    },\r\n  },\r\n  responsiveStacked: {\r\n    \"@media screen and (max-width: 960px)\": {\r\n      display: \"inline-block\",\r\n      fontSize: \"16px\",\r\n      width: \"calc(50% - 80px)\",\r\n      whiteSpace: \"nowrap\",\r\n      height: \"24px\",\r\n    },\r\n  },\r\n};\r\n\r\nclass DripTableBodyCell extends React.Component {\r\n  render() {\r\n    const { children, classes, columnHeader, options, ...otherProps } = this.props;\r\n\r\n    return [\r\n      <TableCell\r\n        key={1}\r\n        className={classNames({\r\n          [classes.root]: true,\r\n          [classes.cellHide]: true,\r\n          [classes.cellStacked]: options.responsive === \"stacked\",\r\n        })}>\r\n        {columnHeader}\r\n      </TableCell>,\r\n      <TableCell\r\n        key={2}\r\n        className={classNames({\r\n          [classes.root]: true,\r\n          [classes.responsiveStacked]: options.responsive === \"stacked\",\r\n        })}\r\n        {...otherProps}>\r\n        {children}\r\n      </TableCell>,\r\n    ];\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyCellStyles, { name: \"DripTableBodyCell\" })(DripTableBodyCell);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultBodyRowStyles = {\r\n  root: {},\r\n  responsiveStacked: {\r\n    \"@media screen and (max-width: 960px)\": {\r\n      border: \"solid 2px rgba(0, 0, 0, 0.15)\",\r\n    },\r\n  },\r\n};\r\n\r\nclass DripTableBodyRow extends React.Component {\r\n  static propTypes = {\r\n    /** オプション一覧 */\r\n    options: PropTypes.object.isRequired,\r\n    /** 行選択フラグ */\r\n    rowSelected: PropTypes.bool,\r\n    /** スタイル */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes, options, rowSelected } = this.props;\r\n\r\n    return (\r\n      <TableRow\r\n        hover={options.rowHover ? true : false}\r\n        className={classNames({\r\n          [classes.root]: true,\r\n          [classes.responsiveStacked]: options.responsive === \"stacked\",\r\n        })}\r\n        selected={rowSelected}>\r\n        {this.props.children}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyRowStyles, { name: \"DripTableBodyRow\" })(DripTableBodyRow);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultSelectCellStyles = {\r\n  root: {\r\n    \"@media screen and (max-width: 960px)\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  checkboxRoot: {\r\n    \"&$checked\": {\r\n      color: \"#027cb5\",\r\n    },\r\n  },\r\n  checked: {},\r\n  disabled: {},\r\n};\r\n\r\nclass DripTableSelectCell extends React.Component {\r\n  static propTypes = {\r\n    /** 行選択フラグON、OFF */\r\n    checked: PropTypes.bool.isRequired,\r\n    /** 親要素からのfuncを実装 */\r\n    onChange: PropTypes.func,\r\n    /** スタイル */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes, ...otherProps } = this.props;\r\n\r\n    return (\r\n      <TableCell className={classes.root} padding=\"checkbox\">\r\n        <Checkbox\r\n          classes={{\r\n            root: classes.checkboxRoot,\r\n            checked: classes.checked,\r\n            disabled: classes.disabled,\r\n          }}\r\n          {...otherProps}\r\n        />\r\n      </TableCell>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultSelectCellStyles, { name: \"DripTableSelectCell\" })(DripTableSelectCell);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\n\r\n/** custom */\r\nimport DripTableBodyCell from \"./DripTableBodyCell\";\r\nimport DripTableBodyRow from \"./DripTableBodyRow\";\r\nimport DripTableSelectCell from \"./DripTableSelectCell\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultBodyStyles = {\r\n  root: {},\r\n  emptyTitle: {\r\n    textAlign: \"center\",\r\n  },\r\n};\r\n\r\nclass DripTableBody extends React.Component {\r\n  static propTypes = {\r\n    /** 使用データ */\r\n    data: PropTypes.array.isRequired,\r\n    /** カラム一覧 */\r\n    columns: PropTypes.array.isRequired,\r\n    /** オプション一覧 */\r\n    options: PropTypes.object.isRequired,\r\n    /** フィルター一覧 */\r\n    filterList: PropTypes.array,\r\n    /** 選択行一覧 */\r\n    selectedRows: PropTypes.array,\r\n    /** 行選択実行時、更新処理 */\r\n    selectRowUpdate: PropTypes.func,\r\n    /** 検索文字列 */\r\n    searchText: PropTypes.string,\r\n    /** スタイリング文字列 */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  /** 行作成処理 */\r\n  buildRows() {\r\n    const { data, page, rowsPerPage } = this.props;\r\n\r\n    let rows = [];\r\n    /** 合計ページ数(切り上) */\r\n    const totalPages = Math.floor(data.length / rowsPerPage);\r\n    /**\r\n     * 現在のページ\r\n     * 表示ページ × 表示行数 = 表示するデータのインデックス(from)\r\n     */\r\n    const fromIndex = page === 0 ? 0 : page * rowsPerPage;\r\n    /**\r\n     * 次ページ\r\n     * 表示ページ × 表示行数 = 表示するデータのインデックス(to)\r\n     */\r\n    const toIndex = Math.min(data.length, (page + 1) * rowsPerPage);\r\n\r\n    if (page > totalPages && totalPages !== 0) {\r\n      throw new Error(\r\n        \"Provided options.page of `\" +\r\n          page +\r\n          \"` is greater than the total available page length of `\" +\r\n          totalPages +\r\n          \"`\",\r\n      );\r\n    }\r\n\r\n    /**\r\n     * 行作成\r\n     * 使用データのインデックス(from) 〜 インデックス(to)までのデータを取得\r\n     */\r\n    for (let rowIndex = fromIndex; rowIndex < data.length && rowIndex < toIndex; rowIndex++) {\r\n      rows.push(data[rowIndex]);\r\n    }\r\n\r\n    return rows.length ? rows : null;\r\n  }\r\n\r\n  /**\r\n   * rowsデータのdata内でのインデックスを取得\r\n   * @param {number} index rowsインデックスを取得\r\n   */\r\n  getRowIndex(index) {\r\n    const { page, rowsPerPage } = this.props;\r\n    /** ページ番号 × 表示行数 */\r\n    const startIndex = page === 0 ? 0 : page * rowsPerPage;\r\n\r\n    return startIndex + index;\r\n  }\r\n\r\n  /**\r\n   * 行選択true、false設定\r\n   * @param {number} index rowsインデックスを取得\r\n   */\r\n  isRowSelected(index) {\r\n    const { selectedRows } = this.props;\r\n    return selectedRows.indexOf(this.getRowIndex(index)) >= 0 ? true : false;\r\n  }\r\n\r\n  /**\r\n   * 行選択時、対象のインデックスを\r\n   * 選択行リストに対して削除または追加\r\n   */\r\n  handleRowSelect = index => {\r\n    this.props.selectRowUpdate(\"cell\", this.getRowIndex(index));\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, options } = this.props;\r\n    const tableRows = this.buildRows();\r\n\r\n    return (\r\n      <TableBody>\r\n        {tableRows ? (\r\n          tableRows.map((row, rowIndex) => (\r\n            <DripTableBodyRow\r\n              options={options}\r\n              rowSelected={options.selectableRows ? this.isRowSelected(rowIndex) : false}\r\n              key={rowIndex}>\r\n              {options.selectableRows ? (\r\n                <DripTableSelectCell\r\n                  onChange={this.handleRowSelect.bind(null, rowIndex)}\r\n                  checked={this.isRowSelected(rowIndex)}\r\n                />\r\n              ) : (\r\n                false\r\n              )}\r\n              {row.map(\r\n                (column, index) =>\r\n                  columns[index].display ? (\r\n                    <DripTableBodyCell columnHeader={columns[index].name} options={options} key={index}>\r\n                      {column}\r\n                    </DripTableBodyCell>\r\n                  ) : (\r\n                    false\r\n                  ),\r\n              )}\r\n            </DripTableBodyRow>\r\n          ))\r\n        ) : (\r\n          <DripTableBodyRow options={options}>\r\n            <DripTableBodyCell colSpan={options.selectableRows ? columns.length + 1 : columns} options={options}>\r\n              <Typography variant=\"subheading\" className={classes.emptyTitle}>\r\n                {options.textLabels.body.noMatch}\r\n              </Typography>\r\n            </DripTableBodyCell>\r\n          </DripTableBodyRow>\r\n        )}\r\n      </TableBody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultBodyStyles, { name: \"DripTableBody\" })(DripTableBody);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultHeadRowStyles = {\r\n  root: {},\r\n};\r\n\r\nclass DripTableHeadRow extends React.Component {\r\n  static propTypes = {\r\n    /** スタイル */\r\n    classes: PropTypes.object,\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <TableRow\r\n        className={classNames({\r\n          [classes.root]: true,\r\n        })}>\r\n        {this.props.children}\r\n      </TableRow>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadRowStyles, { name: \"DripTableHeadRow\" })(DripTableHeadRow);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultHeadCellStyles = {\r\n  tooltip: {\r\n    cursor: \"pointer\",\r\n  },\r\n  mypopper: {\r\n    \"&[data-x-out-of-boundaries]\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  data: {\r\n    display: \"inline-block\",\r\n  },\r\n  sortAction: {\r\n    display: \"inline-block\",\r\n    verticalAlign: \"top\",\r\n    cursor: \"pointer\",\r\n    paddingLeft: \"4px\",\r\n    height: \"10px\",\r\n  },\r\n  sortActive: {\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n  },\r\n  toolButton: {\r\n    height: \"10px\",\r\n    outline: \"none\",\r\n    cursor: \"pointer\",\r\n  },\r\n};\r\n\r\nclass DripTableHeadCell extends React.Component {\r\n  static propTypes = {\r\n    /** スタイル */\r\n    classes: PropTypes.object,\r\n    /** オプション一覧 */\r\n    options: PropTypes.object.isRequired,\r\n    /** ソートキー( asc | desc ) */\r\n    sortDirection: PropTypes.string,\r\n    /** ソートアクション */\r\n    toggleSort: PropTypes.func.isRequired,\r\n  };\r\n\r\n  /** ヘッダーカラムクリック時\r\n   *  ソートアクション実行\r\n   */\r\n  handleSortClick = () => {\r\n    this.props.toggleSort(this.props.index);\r\n  };\r\n\r\n  render() {\r\n    const { children, classes, options, sortDirection } = this.props;\r\n    // ソート有効フラグ\r\n    const sortActive = sortDirection !== null && sortDirection !== undefined ? true : false;\r\n\r\n    const sortLabelProps = {\r\n      active: sortActive,\r\n      ...(sortDirection ? { direction: sortDirection } : {}),\r\n    };\r\n\r\n    return (\r\n      <TableCell className={classes.root} scope={\"col\"} sortDirection={sortDirection}>\r\n        {options.sort ? (\r\n          <Tooltip\r\n            title={options.textLabels.body.toolTip}\r\n            placement={\"bottom-end\"}\r\n            className={classes.tooltip}\r\n            enterDelay={300}\r\n            classes={{ popper: classes.mypopper }}>\r\n            <span\r\n              role=\"button\"\r\n              onKeyUp={this.handleClickSort}\r\n              onClick={this.handleSortClick}\r\n              className={classes.toolButton}\r\n              tabIndex={0}>\r\n              <div\r\n                className={classNames({\r\n                  [classes.data]: true,\r\n                  [classes.sortActive]: sortActive,\r\n                })}>\r\n                {children}\r\n              </div>\r\n              <div className={classes.sortAction}>\r\n                <TableSortLabel {...sortLabelProps} />\r\n              </div>\r\n            </span>\r\n          </Tooltip>\r\n        ) : (\r\n          children\r\n        )}\r\n      </TableCell>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadCellStyles, { name: \"DripTableHeadCell\" })(DripTableHeadCell);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n/** material-ui */\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** custom */\r\nimport DripTableHeadRow from \"./DripTableHeadRow\";\r\nimport DripTableHeadCell from \"./DripTableHeadCell\";\r\nimport DripTableSelectCell from \"./DripTableSelectCell\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultHeadStyles = {\r\n  main: {},\r\n  responsiveStacked: {\r\n    \"@media screen and (max-width: 960px)\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n};\r\n\r\nclass DripTableHead extends React.Component {\r\n  state = {\r\n    activeColumn: null, // 初期状態：選択状態カラム無\r\n    selectChecked: false, // 初期状態：Deleteモード無\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.handleHeadUpdateRef(this.handleUpdateCheck);\r\n  }\r\n\r\n  /**\r\n   *  カラム選択時ソート処理\r\n   * 選択したカラムのインデックスを設定\r\n   * 設定後、ソートキーに設定\r\n   */\r\n  handleToggleColumn = index => {\r\n    this.setState(() => ({\r\n      activeColumn: index,\r\n    }));\r\n    this.props.toggleSort(index);\r\n  };\r\n\r\n  /**\r\n   * 全件(行)選択時、\r\n   * ON ：選択リストにページ内のデータインデックスを追加する。\r\n   * OFF：選択リストからページ内のデータインデックスを削除する。\r\n   */\r\n  handleRowSelect = () => {\r\n    this.setState(\r\n      prevState => ({\r\n        selectChecked: !prevState.selectChecked,\r\n      }),\r\n      () => this.props.selectRowUpdate(\"head\", this.state.selectChecked),\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 行選択フラグを更新\r\n   * 削除実行後はfalseが設定される\r\n   */\r\n  handleUpdateCheck = status => {\r\n    this.setState(() => ({\r\n      selectChecked: status,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { classes, columns, options } = this.props;\r\n    const { selectChecked } = this.state;\r\n\r\n    return (\r\n      <TableHead\r\n        className={classNames({ [classes.responsiveStacked]: options.responsive === \"stacked\", [classes.main]: true })}>\r\n        <DripTableHeadRow>\r\n          {options.selectableRows ? (\r\n            <DripTableSelectCell onChange={this.handleRowSelect.bind(null)} checked={selectChecked} />\r\n          ) : (\r\n            false\r\n          )}\r\n          {columns.map(\r\n            (column, index) =>\r\n              column.display ? (\r\n                <DripTableHeadCell\r\n                  key={index}\r\n                  index={index}\r\n                  sort={column.sort}\r\n                  sortDirection={column.sortDirection}\r\n                  toggleSort={this.handleToggleColumn}\r\n                  options={options}>\r\n                  {column.name}\r\n                </DripTableHeadCell>\r\n              ) : (\r\n                false\r\n              ),\r\n          )}\r\n        </DripTableHeadRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultHeadStyles, { name: \"DripTableHead\" })(DripTableHead);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultPaginationStyles = {\r\n  root: {\r\n    \"&:last-child\": {\r\n      padding: \"0px 24px 0px 24px\",\r\n    },\r\n  },\r\n  toolbar: {},\r\n  selectRoot: {},\r\n  \"@media screen and (max-width: 400px)\": {\r\n    toolbar: {\r\n      \"& span:nth-child(2)\": {\r\n        display: \"none\",\r\n      },\r\n    },\r\n    selectRoot: {\r\n      marginRight: \"8px\",\r\n    },\r\n  },\r\n};\r\n\r\nclass DripTablePagination extends React.Component {\r\n  static propTypes = {\r\n    /** 行の合計値 */\r\n    count: PropTypes.number.isRequired,\r\n    /** オプション一覧 */\r\n    options: PropTypes.object.isRequired,\r\n    /** 現在のページ番号 */\r\n    page: PropTypes.number.isRequired,\r\n    /** １ページ当たりの表示行数 */\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n    /** 表示行数変更時アクション */\r\n    changeRowsPerPage: PropTypes.func.isRequired,\r\n  };\r\n\r\n  /**\r\n   * 表示行数変更時\r\n   * 表示行数の更新\r\n   */\r\n  handleRowChange = event => {\r\n    this.props.changeRowsPerPage(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * ページ切り替え時\r\n   * 現在ページの更新\r\n   */\r\n  handlePageChange = (_, page) => {\r\n    this.props.changePage(page);\r\n  };\r\n\r\n  render() {\r\n    const { count, classes, options, rowsPerPage, page } = this.props;\r\n    const textLabels = options.textLabels.pagination;\r\n\r\n    return (\r\n      <TableFooter>\r\n        <TableRow>\r\n          <TablePagination\r\n            className={classes.root}\r\n            classes={{\r\n              caption: classes.caption,\r\n              toolbar: classes.toolbar,\r\n              selectRoot: classes.selectRoot,\r\n            }}\r\n            count={count}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            labelRowsPerPage={textLabels.rowsPerPage}\r\n            labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${textLabels.displayRows} ${count}`}\r\n            backIconButtonProps={{\r\n              \"aria-label\": textLabels.previous,\r\n            }}\r\n            nextIconButtonProps={{\r\n              \"aria-label\": textLabels.next,\r\n            }}\r\n            rowsPerPageOptions={options.rowsPerPageOptions}\r\n            onChangePage={this.handlePageChange}\r\n            onChangeRowsPerPage={this.handleRowChange}\r\n          />\r\n        </TableRow>\r\n      </TableFooter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultPaginationStyles, { name: \"DripTablePagination\" })(DripTablePagination);\r\n","/**\r\n * デフォルト\r\n * テーブル内表示文字列一覧\r\n */\r\nconst textLabels = {\r\n  body: {\r\n    noMatch: \"Sorry, no matching records found\",\r\n    toolTip: \"Sort\",\r\n  },\r\n  pagination: {\r\n    next: \"Next Page\",\r\n    previous: \"Previous Page\",\r\n    rowsPerPage: \"Rows per page:\",\r\n    displayRows: \"of\",\r\n  },\r\n  toolbar: {\r\n    search: \"Search\",\r\n    downloadCsv: \"Download CSV\",\r\n    print: \"Print\",\r\n    viewColumns: \"View Columns\",\r\n    filterTable: \"Filter Table\",\r\n  },\r\n  filter: {\r\n    all: \"All\",\r\n    title: \"FILTERS\",\r\n    reset: \"RESET\",\r\n  },\r\n  viewColumns: {\r\n    title: \"Show Columns\",\r\n    titleAria: \"Show/Hide Table Columns\",\r\n  },\r\n  selectedRows: {\r\n    text: \"rows(s) deleted\",\r\n    delete: \"Delete\",\r\n    deleteAria: \"Delete Selected Rows\",\r\n  },\r\n};\r\n\r\nexport default textLabels;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** material-ui */\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n/** custom */\r\nimport DripTableToolbar from \"./DripTableToolbar\";\r\nimport DripTableToolbarSelect from \"./DripTableToolbarSelect\";\r\nimport DripTableFilterList from \"./DripTableFilterList\";\r\nimport DripTableBody from \"./DripTableBody\";\r\nimport DripTableHead from \"./DripTableHead\";\r\nimport DripTablePagination from \"./DripTablePagination\";\r\n\r\nimport cloneDeep from \"lodash.clonedeep\";\r\nimport merge from \"lodash.merge\";\r\nimport textLabels from \"./textLabels\";\r\n\r\n/** デフォルトスタイル */\r\nconst defaultTableStyles = {\r\n  root: {},\r\n  responsiveScroll: {\r\n    overflowX: \"auto\",\r\n  },\r\n  caption: {\r\n    position: \"absolute\",\r\n    left: \"-1000px\",\r\n  },\r\n  liveAnnounce: {\r\n    border: \"0\",\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: \"1px\",\r\n    margin: \"-1px\",\r\n    overflow: \"hidden\",\r\n    padding: \"0\",\r\n    position: \"absolute\",\r\n    width: \"1px\",\r\n  },\r\n};\r\n\r\nclass DripTable extends React.Component {\r\n  static propTypes = {\r\n    /** テーブルタイトル */\r\n    title: PropTypes.string.isRequired,\r\n\r\n    /** 使用データリスト */\r\n    data: PropTypes.array.isRequired,\r\n\r\n    /** 使用カラムリスト\r\n     *  <values>\r\n     *   name:         カラム名\r\n     *   options:      カラム表示フラグ\r\n     *   filter:       フィルター有効フラグ\r\n     *   sort:         ソートキー有効フラグ\r\n     *   customRender: 外部関数\r\n     */\r\n    columns: PropTypes.PropTypes.arrayOf(\r\n      PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.shape({\r\n          name: PropTypes.string.isRequired,\r\n          options: PropTypes.shape({\r\n            display: PropTypes.bool,\r\n            filter: PropTypes.bool,\r\n            sort: PropTypes.bool,\r\n            customRender: PropTypes.func,\r\n          }),\r\n        }),\r\n      ]),\r\n    ).isRequired,\r\n\r\n    /** オプションリスト */\r\n    options: PropTypes.shape({\r\n      /** ヘッダー固定ON、OFF */\r\n      responsive: PropTypes.oneOf([\"stacked\", \"scroll\"]),\r\n      /** フィルタータイプリスト */\r\n      filterType: PropTypes.oneOf([\"dropdown\", \"checkbox\", \"multiselect\"]),\r\n      /** テーブル内表示文字列一覧 */\r\n      textLabels: PropTypes.object,\r\n      /** ページネーション有効フラグ */\r\n      pagination: PropTypes.bool,\r\n      /** 行選択有効フラグ */\r\n      selectableRows: PropTypes.bool,\r\n      /**  */\r\n      caseSensitive: PropTypes.bool,\r\n      /** 行アクション有効フラグ */\r\n      rowHover: PropTypes.bool,\r\n      /** ページ */\r\n      page: PropTypes.number,\r\n      /** フィルターリスト */\r\n      filterList: PropTypes.array,\r\n      /** ページ内最大表示行数 */\r\n      rowsPerPage: PropTypes.number,\r\n      /** 最大行数選択リスト */\r\n      rowsPerPageOptions: PropTypes.array,\r\n      /** フィルター有効フラグ */\r\n      filter: PropTypes.bool,\r\n      /** ソートキー有効フラグ */\r\n      sort: PropTypes.bool,\r\n      /** 検索有効フラグ */\r\n      search: PropTypes.bool,\r\n      /** プリント有効フラグ */\r\n      print: PropTypes.bool,\r\n      /** カラム表示フラグ */\r\n      viewColumns: PropTypes.bool,\r\n      /** ダウンロード有効フラグ */\r\n      download: PropTypes.bool,\r\n    }),\r\n    /** テーブルスタイル */\r\n    className: PropTypes.string,\r\n  };\r\n\r\n  /** デフォルト設定 */\r\n  static defaultProps = {\r\n    title: \"\",\r\n    options: {},\r\n    data: [],\r\n    columns: [],\r\n  };\r\n\r\n  /** テーブル初期値 */\r\n  state = {\r\n    open: false,\r\n    announceText: null,\r\n    data: [],\r\n    displayData: [],\r\n    page: 0,\r\n    rowsPerPage: 0,\r\n    columns: [],\r\n    filterData: [],\r\n    filterList: [],\r\n    selectedRows: [],\r\n    showResponsive: false,\r\n    searchText: null,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.tableRef = false;\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.initializeTable(this.props);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.data !== nextProps.data || this.props.columns !== nextProps.columns) {\r\n      this.initializeTable(nextProps);\r\n    }\r\n  }\r\n\r\n  initializeTable(props) {\r\n    this.getDefaultOptions(props);\r\n    this.setTableOptions(props);\r\n    this.setTableData(props);\r\n  }\r\n\r\n  /*\r\n   * デフォルトオプション\r\n   */\r\n  getDefaultOptions(props) {\r\n    const defaultOptions = {\r\n      responsive: \"stacked\",\r\n      filterType: \"checkbox\",\r\n      pagination: true,\r\n      textLabels,\r\n      selectableRows: true,\r\n      caseSensitive: false,\r\n      rowHover: true,\r\n      rowsPerPage: 10,\r\n      rowsPerPageOptions: [5, 10, 15, 100],\r\n      filter: true,\r\n      sortFilterList: true,\r\n      sort: true,\r\n      search: true,\r\n      print: true,\r\n      viewColumns: true,\r\n      download: true,\r\n    };\r\n\r\n    this.options = merge(defaultOptions, props.options);\r\n  }\r\n\r\n  /** テーブルオプション設定 */\r\n  setTableOptions(props) {\r\n    const optionNames = [\"rowsPerPage\", \"page\", \"filterList\", \"rowsPerPageOptions\"];\r\n    const optState = optionNames.reduce((acc, cur) => {\r\n      if (this.options[cur]) {\r\n        let val = this.options[cur];\r\n        if (cur === \"page\") val--;\r\n        acc[cur] = val;\r\n      }\r\n      return acc;\r\n    }, {});\r\n    this.setState(optState);\r\n  }\r\n\r\n  /**  テーブルデータ設定 */\r\n  setTableData(props) {\r\n    const { data, columns, options } = props;\r\n\r\n    let columnData = [],\r\n      filterData = [],\r\n      filterList = [];\r\n\r\n    columns.forEach((column, colIndex) => {\r\n      let columnOptions = {\r\n        display: true,\r\n        filter: true,\r\n        sort: true,\r\n        sortDirection: null,\r\n      };\r\n\r\n      if (typeof column === \"object\") {\r\n        columnOptions = {\r\n          name: column.name,\r\n          ...columnOptions,\r\n          ...(column.options ? column.options : {}),\r\n        };\r\n      } else {\r\n        columnOptions = { ...columnOptions, name: column };\r\n      }\r\n\r\n      columnData.push(columnOptions);\r\n\r\n      filterData[colIndex] = [];\r\n      filterList[colIndex] = [];\r\n\r\n      for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n        let value = data[rowIndex][colIndex];\r\n        if (typeof columnOptions.customRender === \"function\") {\r\n          const funcResult = columnOptions.customRender(rowIndex, data[rowIndex][colIndex]);\r\n\r\n          if (React.isValidElement(funcResult) && funcResult.props.value) {\r\n            value = funcResult.props.value;\r\n          } else if (typeof funcResult === \"string\") {\r\n            value = funcResult;\r\n          }\r\n        }\r\n\r\n        if (filterData[colIndex].indexOf(value) < 0) filterData[colIndex].push(value);\r\n      }\r\n\r\n      if (this.options.sortFilterList) {\r\n        const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: \"base\" });\r\n        filterData[colIndex].sort(collator.compare);\r\n      }\r\n    });\r\n\r\n    if (options.filterList) filterList = options.filterList;\r\n\r\n    if (filterList.length !== columns.length) {\r\n      throw new Error(\"Provided options.filterList does not match the column length!!\");\r\n    }\r\n\r\n    /* ソースデータ、ディスプレイデータ設定 */\r\n    this.setState(prevState => ({\r\n      columns: columnData,\r\n      filterData: filterData,\r\n      filterList: filterList,\r\n      selectedRows: [],\r\n      data: data,\r\n      displayData: this.getDisplayData(columnData, data, filterList, prevState.searchText),\r\n    }));\r\n  }\r\n\r\n  /** 行の表示・非表示設定 */\r\n  isRowDisplayed(columns, row, filterList, searchText) {\r\n    let isFiltered = false,\r\n      isSearchFound = false;\r\n\r\n    for (let index = 0; index < row.length; index++) {\r\n      let column = row[index];\r\n\r\n      if (columns[index].customRender) {\r\n        const funcResult = columns[index].customRender(index, column);\r\n        column =\r\n          typeof funcResult === \"string\"\r\n            ? funcResult\r\n            : funcResult.props && funcResult.props.value\r\n              ? funcResult.props.value\r\n              : column;\r\n      }\r\n\r\n      if (filterList[index].length && filterList[index].indexOf(column) < 0) {\r\n        isFiltered = true;\r\n        break;\r\n      }\r\n\r\n      const searchCase = !this.options.caseSensitive ? column.toString().toLowerCase() : column.toString();\r\n\r\n      if (searchText && searchCase.indexOf(searchText.toLowerCase()) >= 0) {\r\n        isSearchFound = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (isFiltered || (searchText && !isSearchFound)) return false;\r\n    else return true;\r\n  }\r\n\r\n  updateDataCol = (row, index, value) => {\r\n    this.setState(prevState => {\r\n      let changedData = cloneDeep(prevState.data);\r\n      let filterData = cloneDeep(prevState.filterData);\r\n\r\n      const funcResult = prevState.columns[index].customRender(index, value);\r\n\r\n      const filterValue =\r\n        React.isValidElement(funcResult) && funcResult.props.value\r\n          ? funcResult.props.value\r\n          : prevState[\"data\"][row][index];\r\n\r\n      const prevFilterIndex = filterData[index].indexOf(filterValue);\r\n      filterData[index].splice(prevFilterIndex, 1, filterValue);\r\n\r\n      changedData[row][index] = value;\r\n\r\n      if (this.options.sortFilterList) {\r\n        const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: \"base\" });\r\n        filterData[index].sort(collator.compare);\r\n      }\r\n\r\n      return {\r\n        data: changedData,\r\n        filterData: filterData,\r\n        displayData: this.getDisplayData(prevState.columns, changedData, prevState.filterList, prevState.searchText),\r\n      };\r\n    });\r\n  };\r\n\r\n  getDisplayData(columns, data, filterList, searchText) {\r\n    let newRows = [];\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n      if (this.isRowDisplayed(columns, data[index], filterList, searchText))\r\n        newRows.push(\r\n          columns.map((column, colIndex) => {\r\n            return typeof column.customRender === \"function\"\r\n              ? column.customRender(index, data[index][colIndex], this.updateDataCol.bind(null, index, colIndex))\r\n              : data[index][colIndex];\r\n          }),\r\n        );\r\n    }\r\n\r\n    return newRows;\r\n  }\r\n\r\n  toggleViewColumn = index => {\r\n    this.setState(\r\n      prevState => {\r\n        const columns = cloneDeep(prevState.columns);\r\n        columns[index].display = !columns[index].display;\r\n        return {\r\n          columns: columns,\r\n        };\r\n      },\r\n      () => {\r\n        if (this.options.onColumnViewChange) {\r\n          this.options.onColumnViewChange(\r\n            this.state.columns[index].name,\r\n            this.state.columns[index].display ? \"add\" : \"remove\",\r\n          );\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  getSortDirection(column) {\r\n    return column.sortDirection === \"asc\" ? \"ascending\" : \"descending\";\r\n  }\r\n\r\n  toggleSortColumn = index => {\r\n    this.setState(\r\n      prevState => {\r\n        let columns = cloneDeep(prevState.columns);\r\n        let data = prevState.data;\r\n        const order = prevState.columns[index].sortDirection;\r\n\r\n        for (let pos = 0; pos < columns.length; pos++) {\r\n          if (index !== pos) {\r\n            columns[pos].sortDirection = null;\r\n          } else {\r\n            columns[pos].sortDirection = columns[pos].sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n          }\r\n        }\r\n\r\n        const orderLabel = this.getSortDirection(columns[index]);\r\n        const announceText = `Table now sorted by ${columns[index].name} : ${orderLabel}`;\r\n        const sortedData = this.sortTable(data, index, order);\r\n\r\n        return {\r\n          columns: columns,\r\n          announceText: announceText,\r\n          data: sortedData.data,\r\n          displayData: this.getDisplayData(columns, sortedData.data, prevState.filterList, prevState.searchText),\r\n          selectedRows: sortedData.selectedRows,\r\n        };\r\n      },\r\n      () => {\r\n        if (this.options.onColumnSortChange) {\r\n          this.options.onColumnSortChange(\r\n            this.state.columns[index].name,\r\n            this.getSortDirection(this.state.columns[index]),\r\n          );\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 表示行数変更時\r\n   * 表示行数の更新\r\n   * rows: 画面上で選択した行数\r\n   */\r\n  changeRowsPerPage = rows => {\r\n    this.setState(\r\n      () => ({\r\n        rowsPerPage: rows,\r\n      }),\r\n      // オプションで設定されたfuncを実行\r\n      () => {\r\n        if (this.options.onChangeRowsPerPage) {\r\n          this.options.onChangeRowsPerPage(this.state.rowsPerPage);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  /**\r\n   * ページ切り替え時\r\n   * 現在ページ番号の更新\r\n   * page: 現在のページ番号\r\n   */\r\n  changePage = page => {\r\n    this.setState(\r\n      () => ({\r\n        page: page,\r\n      }),\r\n      // オプションで設定されたfuncを実行\r\n      () => {\r\n        if (this.options.onChangePage) {\r\n          this.options.onChangePage(this.state.page);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  searchTextUpdate = text => {\r\n    this.setState(prevState => ({\r\n      searchText: text && text.length ? text : null,\r\n      displayData: this.getDisplayData(prevState.columns, prevState.data, prevState.filterList, text),\r\n    }));\r\n  };\r\n\r\n  resetFilters = () => {\r\n    this.setState(\r\n      prevState => {\r\n        const filterList = prevState.columns.map((column, index) => []);\r\n\r\n        return {\r\n          filterList: filterList,\r\n          displayData: this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n        };\r\n      },\r\n      () => {\r\n        if (this.options.onFilterChange) {\r\n          this.options.onFilterChange(null, this.state.filterList);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  filterUpdate = (index, column, type) => {\r\n    this.setState(\r\n      prevState => {\r\n        const filterList = cloneDeep(prevState.filterList);\r\n        const filterPos = filterList[index].indexOf(column);\r\n\r\n        switch (type) {\r\n          case \"checkbox\":\r\n            filterPos >= 0 ? filterList[index].splice(filterPos, 1) : filterList[index].push(column);\r\n            break;\r\n          case \"multiselect\":\r\n            filterList[index] = column === \"\" ? [] : column;\r\n            break;\r\n          default:\r\n            filterList[index] = filterPos >= 0 || column === \"\" ? [] : [column];\r\n        }\r\n\r\n        return {\r\n          filterList: filterList,\r\n          displayData: this.getDisplayData(prevState.columns, prevState.data, filterList, prevState.searchText),\r\n        };\r\n      },\r\n      () => {\r\n        if (this.options.onFilterChange) {\r\n          this.options.onFilterChange(column, this.state.filterList);\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  /**\r\n   * 選択行削除処理\r\n   * 行選択時ツールバーに設定するfunc\r\n   */\r\n  selectRowDelete = () => {\r\n    // 選択行リストのインデックスデータを利用データから除外\r\n    const cleanRows = this.state.data.filter((_, index) => this.state.selectedRows.indexOf(index) === -1);\r\n\r\n    // オプションに処理を設定している場合、後続処理を実行\r\n    if (this.options.onRowsDelete) {\r\n      this.options.onRowsDelete(this.state.displayData, this.state.selectedRows);\r\n    }\r\n\r\n    // 行選択フラグにfalseを設定\r\n    this.updateToolbarSelect(false);\r\n\r\n    // データの更新\r\n    this.setTableData({\r\n      columns: this.props.columns,\r\n      data: cleanRows,\r\n      options: {\r\n        filterList: this.state.filterList,\r\n      },\r\n    });\r\n  };\r\n\r\n  selectRowUpdate = (type, value) => {\r\n    /** テーブルヘッダー処理 */\r\n    if (type === \"head\") {\r\n      this.setState(\r\n        prevState => {\r\n          const { data } = prevState;\r\n\r\n          // データ全件を設定(index)\r\n          let selectedRows = Array(data.length)\r\n            .fill()\r\n            .map((d, i) => i);\r\n\r\n          // ディスプレイに表示されているデータの一覧を取得\r\n          let displayDataList = this.getDisplayData(\r\n            prevState.columns,\r\n            prevState.data,\r\n            prevState.filterList,\r\n            prevState.searchText,\r\n          );\r\n\r\n          // フィルタリングされているかのチェック\r\n          let filteringFlg = false;\r\n          prevState.filterList.forEach(function(clmFilter) {\r\n            if (clmFilter.length >= 1) filteringFlg = true;\r\n          });\r\n\r\n          // フィルタリングされている場合、\r\n          // フィルタリングされた値でリストを作成\r\n          let filteredList = [];\r\n          if (filteringFlg) {\r\n            displayDataList.forEach(function(rowValue) {\r\n              console.log(\"行データ：\" + rowValue);\r\n              prevState.data.forEach(function(rawData, i) {\r\n                console.log(\"bool：\" + (rawData.toString() == rowValue.toString()));\r\n                console.log(\"フィルタリングリスト：\" + filteredList);\r\n                if (rawData.toString() == rowValue.toString()) filteredList.push(i);\r\n              });\r\n            });\r\n          }\r\n\r\n          // 新しい選択行リスト\r\n          let newRows = [];\r\n          if (value === false) {\r\n            // 全体選択のチェックを外した場合はindexの値を削除\r\n            newRows = [];\r\n\r\n            // フィルタリングしている場合、フィルタリングされたデータのみ\r\n          } else if (filteringFlg) {\r\n            newRows = filteredList;\r\n\r\n            // フィルタリングしていない場合、全件\r\n          } else {\r\n            newRows = selectedRows;\r\n          }\r\n          return {\r\n            curSelectedRows: selectedRows,\r\n            selectedRows: newRows,\r\n          };\r\n        },\r\n        // 処理を実装している場合、処理を実行\r\n        () => {\r\n          if (this.options.onRowsSelect) {\r\n            this.options.onRowsSelect(this.state.curSelectedRows, this.state.selectedRows);\r\n          }\r\n        },\r\n      );\r\n    } else if (type === \"cell\") {\r\n      this.setState(\r\n        prevState => {\r\n          let selectedRows = [...prevState.selectedRows];\r\n          const rowPos = selectedRows.indexOf(value);\r\n\r\n          /** 行選択リストに存在する場合、リストから削除 */\r\n          if (rowPos >= 0) {\r\n            selectedRows.splice(rowPos, 1);\r\n            /** 行選択リストに存在しない場合、リストに追加 */\r\n          } else {\r\n            selectedRows.push(value);\r\n          }\r\n\r\n          return {\r\n            selectedRows: selectedRows,\r\n          };\r\n        },\r\n        () => {\r\n          if (this.options.onRowsSelect) {\r\n            this.options.onRowsSelect([value], this.state.selectedRows);\r\n          }\r\n        },\r\n      );\r\n    }\r\n  };\r\n\r\n  sortCompare(order) {\r\n    return (a, b) =>\r\n      (typeof a.data.localeCompare === \"function\" ? a.data.localeCompare(b.data) : a.data - b.data) *\r\n      (order === \"asc\" ? -1 : 1);\r\n  }\r\n\r\n  sortTable(data, col, order) {\r\n    let sortedData = data.map((row, index) => ({\r\n      data: row[col],\r\n      position: index,\r\n      rowSelected: this.state.selectedRows.indexOf(index) >= 0 ? true : false,\r\n    }));\r\n\r\n    sortedData.sort(this.sortCompare(order));\r\n\r\n    let tableData = [];\r\n    let selectedRows = [];\r\n\r\n    for (let i = 0; i < sortedData.length; i++) {\r\n      const row = sortedData[i];\r\n      tableData.push(data[row.position]);\r\n      if (row.rowSelected) {\r\n        selectedRows.push(i);\r\n      }\r\n    }\r\n\r\n    return {\r\n      data: tableData,\r\n      selectedRows: selectedRows,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { classes, title } = this.props;\r\n    const {\r\n      announceText,\r\n      data,\r\n      displayData,\r\n      columns,\r\n      page,\r\n      filterData,\r\n      filterList,\r\n      rowsPerPage,\r\n      selectedRows,\r\n      searchText,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Paper elevation={4} ref={el => (this.tableContent = el)}>\r\n        {selectedRows.length ? (\r\n          <DripTableToolbarSelect\r\n            options={this.options}\r\n            selectedRows={selectedRows}\r\n            onRowsDelete={this.selectRowDelete}\r\n          />\r\n        ) : (\r\n          <DripTableToolbar\r\n            columns={columns}\r\n            data={data}\r\n            filterData={filterData}\r\n            filterList={filterList}\r\n            filterUpdate={this.filterUpdate}\r\n            options={this.options}\r\n            resetFilters={this.resetFilters}\r\n            searchTextUpdate={this.searchTextUpdate}\r\n            tableRef={() => this.tableContent}\r\n            title={title}\r\n            toggleViewColumn={this.toggleViewColumn}\r\n          />\r\n        )}\r\n        <DripTableFilterList options={this.options} filterList={filterList} filterUpdate={this.filterUpdate} />\r\n        <div className={this.options.responsive === \"scroll\" ? classes.responsiveScroll : null}>\r\n          <Table ref={el => (this.tableRef = el)} tabIndex={\"0\"} role={\"grid\"}>\r\n            <caption className={classes.caption}>{title}</caption>\r\n            <DripTableHead\r\n              columns={columns}\r\n              handleHeadUpdateRef={fn => (this.updateToolbarSelect = fn)}\r\n              selectRowUpdate={this.selectRowUpdate}\r\n              toggleSort={this.toggleSortColumn}\r\n              options={this.options}\r\n            />\r\n            <DripTableBody\r\n              data={this.state.displayData}\r\n              columns={columns}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n              selectedRows={selectedRows}\r\n              selectRowUpdate={this.selectRowUpdate}\r\n              options={this.options}\r\n              searchText={searchText}\r\n              filterList={filterList}\r\n            />\r\n          </Table>\r\n        </div>\r\n        <Table>\r\n          {this.options.pagination ? (\r\n            <DripTablePagination\r\n              count={displayData.length}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n              changeRowsPerPage={this.changeRowsPerPage}\r\n              changePage={this.changePage}\r\n              component={\"div\"}\r\n              options={this.options}\r\n            />\r\n          ) : (\r\n            false\r\n          )}\r\n        </Table>\r\n        <div className={classes.liveAnnounce} aria-live={\"polite\"} ref={el => (this.announceRef = el)}>\r\n          {announceText}\r\n        </div>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(defaultTableStyles, { name: \"DripTable\" })(DripTable);\r\n"],"names":["DripPopoverContent","this","props","children","React","Component","DripPopoverTarget","Children","map","child","index","cloneElement","_this2","targetRef","onClick","DripPopover","state","handleClick","anchorEl","findDOMNode","_this","setState","open","handleRequestClose","cb","handleOnExit","refExit","refClose","prevProps","prevState","popoverActions","updatePosition","popoverRender","className","placement","providedProps","type","popoverContent","actions","popoverEl","push","targetContent","el","defaultFilterStyles","DripTableFilter","handleCheckboxChange","column","onFilterUpdate","handleDropdownChange","event","value","target","handleMultiselectChange","columns","classes","filterData","filterList","filter","checkboxList","key","variant","checkboxListTitle","name","filterColumn","filterIndex","FormControlLabel","checkboxFormControl","checkboxFormControlLabel","Checkbox","checkboxIcon","bind","indexOf","checkbox","checked","toString","textLabels","options","selectRoot","selectFormControl","htmlFor","all","_this3","Input","id","selected","join","_this4","ListItemText","primary","onFilterReset","root","header","reset","classNames","title","noMargin","filterType","resetLink","tabIndex","aria-label","filtersSelected","renderCheckbox","renderMultiselect","renderSelect","withStyles","defaultViewColStyles","DripTableViewCol","handleColChange","onColumnUpdate","viewColumns","component","titleAria","formGroup","formControl","label","checkboxRoot","display","defaultSearchStyles","DripTableSearch","handleTextChange","onSearchChange","onSearch","onKeyDown","keyCode","onHide","addEventListener","removeEventListener","appear","in","timeout","main","ref","rootRef","SearchIcon","searchIcon","TextField","searchText","toolbar","search","searchField","clearIcon","ClearIcon","getStyle","obj","get","stylePass","displayName","setFn","result","nextProps","DataStyles","setStyleClass","data","buildComponent","styles","defaultStyles","finalStyles","merge","WrappedComponent","styleData","defaultToolbarStyles","responsiveToolbarStyles","DripTableToolbar","handleCSVDownload","CSVHead","reduce","soFar","slice","CSVBody","row","trim","CSVLink","document","createElement","href","window","btoa","unescape","encodeURIComponent","download","body","appendChild","click","parentNode","removeChild","setActiveIcon","iconName","getActiveIcon","iconActive","icon","hideSearch","searchTextUpdate","searchButton","focus","responsive","tbarStyles","filterUpdate","resetFilters","toggleViewColumn","tableRef","downloadCsv","print","filterTable","showSearch","toolbarStyles","role","left","titleRoot","aria-hidden","titleText","DownloadIcon","ReactToPrint","PrintIcon","container","ViewColumnIcon","FilterIcon","defaultToolbarSelectStyles","DripTableToolbarSelect","onRowsDelete","selectedRows","length","text","delete","iconButton","deleteAria","DeleteIcon","deleteIcon","defaultFilterListStyles","DripTableFilterList","item","colIndex","Chip","chip","defaultBodyCellStyles","DripTableBodyCell","columnHeader","otherProps","cellHide","cellStacked","responsiveStacked","defaultBodyRowStyles","DripTableBodyRow","rowSelected","rowHover","defaultSelectCellStyles","DripTableSelectCell","padding","disabled","defaultBodyStyles","DripTableBody","handleRowSelect","selectRowUpdate","getRowIndex","page","rowsPerPage","rows","totalPages","Math","floor","fromIndex","toIndex","min","Error","rowIndex","tableRows","buildRows","selectableRows","isRowSelected","colSpan","emptyTitle","noMatch","defaultHeadRowStyles","DripTableHeadRow","defaultHeadCellStyles","DripTableHeadCell","handleSortClick","toggleSort","sortDirection","sortActive","sortLabelProps","direction","scope","sort","toolTip","tooltip","popper","mypopper","handleClickSort","toolButton","sortAction","TableSortLabel","defaultHeadStyles","DripTableHead","handleToggleColumn","selectChecked","handleUpdateCheck","status","handleHeadUpdateRef","onChange","defaultPaginationStyles","DripTablePagination","handleRowChange","changeRowsPerPage","handlePageChange","_","changePage","count","pagination","TablePagination","caption","from","to","displayRows","previous","next","rowsPerPageOptions","defaultTableStyles","DripTable","updateDataCol","changedData","cloneDeep","funcResult","customRender","filterValue","isValidElement","prevFilterIndex","splice","sortFilterList","collator","Intl","Collator","undefined","numeric","sensitivity","compare","getDisplayData","onColumnViewChange","toggleSortColumn","order","pos","orderLabel","getSortDirection","announceText","sortedData","sortTable","onColumnSortChange","onChangeRowsPerPage","onChangePage","onFilterChange","filterPos","selectRowDelete","cleanRows","displayData","updateToolbarSelect","setTableData","Array","fill","d","i","displayDataList","filteringFlg","forEach","clmFilter","filteredList","rowValue","log","rawData","onRowsSelect","curSelectedRows","rowPos","initializeTable","getDefaultOptions","setTableOptions","defaultOptions","optState","acc","cur","val","columnData","columnOptions","isFiltered","isSearchFound","searchCase","caseSensitive","toLowerCase","newRows","isRowDisplayed","a","b","localeCompare","col","_this5","sortCompare","tableData","position","elevation","_this6","tableContent","responsiveScroll","fn","liveAnnounce","aria-live","announceRef","defaultProps"],"mappings":"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"}